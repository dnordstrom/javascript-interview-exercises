{"ast":null,"code":"import _defineProperty from \"/home/dnordstrom/Code/javascript-interview-exercises/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport companies from '../api';\nimport actions from '../actions';\nconst initialState = {\n  companies,\n  filters: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.Types.TOGGLE_FILTER:\n      {\n        console.log(state);\n\n        const newState = _objectSpread({}, state);\n\n        const index = newState.filters.indexOf(action.data); // Modify filter state accordingly\n\n        if (index !== -1) {\n          newState.filters.splice(index, 1);\n        } else {\n          newState.filters.push(action.data);\n        }\n\n        console.log(newState);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/dnordstrom/Code/javascript-interview-exercises/src/reducers/index.js"],"names":["companies","actions","initialState","filters","reducer","state","action","type","Types","TOGGLE_FILTER","console","log","newState","index","indexOf","data","splice","push"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,QAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,MAAMC,YAAY,GAAG;AACnBF,EAAAA,SADmB;AAEnBG,EAAAA,OAAO,EAAE;AAFU,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKN,OAAO,CAACO,KAAR,CAAcC,aAAnB;AAAkC;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AACA,cAAMO,QAAQ,qBAAQP,KAAR,CAAd;;AACA,cAAMQ,KAAK,GAAGD,QAAQ,CAACT,OAAT,CAAiBW,OAAjB,CAAyBR,MAAM,CAACS,IAAhC,CAAd,CAHgC,CAKhC;;AACA,YAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,UAAAA,QAAQ,CAACT,OAAT,CAAiBa,MAAjB,CAAwBH,KAAxB,EAA+B,CAA/B;AACD,SAFD,MAEO;AACLD,UAAAA,QAAQ,CAACT,OAAT,CAAiBc,IAAjB,CAAsBX,MAAM,CAACS,IAA7B;AACD;;AACDL,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,eAAOA,QAAP;AACD;;AAED;AACE,aAAOP,KAAP;AAlBJ;AAqBD,CAtBD;;AAwBA,eAAeD,OAAf","sourcesContent":["import companies from '../api';\nimport actions from '../actions';\n\nconst initialState = {\n  companies,\n  filters: []\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case actions.Types.TOGGLE_FILTER: {\n      console.log(state);\n      const newState = { ...state };\n      const index = newState.filters.indexOf(action.data);\n\n      // Modify filter state accordingly\n      if (index !== -1) {\n        newState.filters.splice(index, 1);\n      } else {\n        newState.filters.push(action.data);\n      }\n      console.log(newState);\n      return newState;\n    }\n    \n    default:\n      return state;\n\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}