{"ast":null,"code":"import _slicedToArray from \"/home/dnordstrom/Code/javascript-interview-exercises/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dnordstrom/Code/javascript-interview-exercises/src/components/CompanyList.js\";\nimport React, { useState } from 'react';\nimport { connect } from \"react-redux\";\nimport CompanyListItem from './CompanyListItem';\nimport Filter from './Filter';\nimport actions from '../actions';\nimport Notifier from '../util/Notifier';\n\nconst mapStateToProps = state => ({\n  companies: state.companies,\n  filters: state.filters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleFilter: location => dispatch(actions.addFilter(location))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(function CompanyList(props) {\n  const companies = props.companies;\n\n  const _useState = useState({\n    filters: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const locations = [...new Set(companies.map(company => company.location))]; // Returns companies that should be visible according to active filter\n\n  const getFilteredCompanies = () => {\n    let filteredCompanies;\n\n    if (state.filters.length) {\n      filteredCompanies = companies.filter(company => state.filters.includes(company.location));\n    } else {\n      filteredCompanies = companies;\n    }\n\n    return filteredCompanies;\n  }; // Filter click handler\n\n\n  const onFilterClick = ({\n    target\n  }) => {\n    const index = props.filters.indexOf(target.innerText); // Modify filter state accordingly\n\n    if (index !== -1) {\n      newState.filters.splice(index, 1);\n    } else {\n      newState.filters.push(target.innerText);\n    }\n\n    setState(newState);\n  }; // Company item click handler\n\n\n  const onItemClick = company => {\n    Notifier.notify(\"\".concat(company.name, \" is located in \").concat(company.location));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, locations.map(location => React.createElement(Filter, {\n    key: location,\n    active: state.filters.includes(location),\n    location: location,\n    onClick: onFilterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, getFilteredCompanies().map(company => React.createElement(CompanyListItem, Object.assign({\n    key: company.id,\n    onClick: onItemClick.bind(null, company)\n  }, company, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })))));\n});","map":{"version":3,"sources":["/home/dnordstrom/Code/javascript-interview-exercises/src/components/CompanyList.js"],"names":["React","useState","connect","CompanyListItem","Filter","actions","Notifier","mapStateToProps","state","companies","filters","mapDispatchToProps","dispatch","toggleFilter","location","addFilter","CompanyList","props","setState","locations","Set","map","company","getFilteredCompanies","filteredCompanies","length","filter","includes","onFilterClick","target","index","indexOf","innerText","newState","splice","push","onItemClick","notify","name","id","bind"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from \"react-redux\";\nimport CompanyListItem from './CompanyListItem';\nimport Filter from './Filter';\nimport actions from '../actions';\nimport Notifier from '../util/Notifier';\n\nconst mapStateToProps = state => ({\n  companies: state.companies,\n  filters: state.filters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleFilter: location => dispatch(actions.addFilter(location))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(function CompanyList(props) {\n  const { companies } = props;\n  const [state, setState] = useState({ filters: [] });\n  const locations = [...new Set(companies.map(company => company.location))];\n  \n  // Returns companies that should be visible according to active filter\n  const getFilteredCompanies = () => {\n    let filteredCompanies;\n\n    if (state.filters.length) {\n      filteredCompanies = companies.filter(\n        company => state.filters.includes(company.location)\n      )\n    } else {\n      filteredCompanies = companies;\n    }\n\n    return filteredCompanies;\n  }\n\n  // Filter click handler\n  const onFilterClick = ({ target }) => {\n    const index = props.filters.indexOf(target.innerText);\n\n    // Modify filter state accordingly\n    if (index !== -1) {\n      newState.filters.splice(index, 1);\n    } else {\n      newState.filters.push(target.innerText);\n    }\n\n    setState(newState);\n  }\n\n  // Company item click handler\n  const onItemClick = (company) => {\n    Notifier.notify(`${company.name} is located in ${company.location}`);\n  };\n\n  return (\n    <div>\n      {locations.map(location => (\n        <Filter\n          key={location}\n          active={state.filters.includes(location)}\n          location={location}\n          onClick={onFilterClick}>\n        </Filter>\n      ))}\n\n      <ul>\n        {getFilteredCompanies().map(company => (\n          <CompanyListItem\n            key={company.id}\n            onClick={onItemClick.bind(null, company)}\n            {...company}>\n          </CompanyListItem>\n        ))}\n      </ul>\n    </div>\n  )\n});"]},"metadata":{},"sourceType":"module"}