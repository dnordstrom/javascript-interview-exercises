{"ast":null,"code":"var _jsxFileName = \"/home/dnordstrom/Code/javascript-interview-exercises/src/components/CompanyList.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport CompanyListItem from './CompanyListItem';\nimport Filter from './Filter';\nimport actions from '../actions';\nimport Notifier from '../util/Notifier';\n\nclass CompanyList extends React.Component {\n  constructor() {\n    super();\n  } // Returns companies that should be visible according to active filter\n\n\n  getFilteredCompanies() {\n    const _this$props = this.props,\n          filters = _this$props.filters,\n          companies = _this$props.companies;\n    let filteredCompanies;\n\n    if (filters.length) {\n      filteredCompanies = companies.filter(company => filters.includes(company.location));\n    } else {\n      filteredCompanies = companies;\n    }\n\n    return filteredCompanies;\n  } // Filter click handler\n\n\n  onFilterClick(event) {\n    event.preventDefault();\n    this.props.toggleFilter(event.target.innerText);\n  } // Company item click handler\n\n\n  onItemClick(company) {\n    Notifier.notify(\"\".concat(company.name, \" is located in \").concat(company.location));\n  }\n\n  renderFilters() {\n    const _this$props2 = this.props,\n          companies = _this$props2.companies,\n          filters = _this$props2.filters;\n    const locations = [...new Set(companies.map(company => company.location))];\n    return locations.map(location => React.createElement(Filter, {\n      active: filters.includes(location),\n      key: location,\n      location: location,\n      onClick: this.onFilterClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n  renderList() {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.getFilteredCompanies().map(company => React.createElement(CompanyListItem, Object.assign({\n      key: company.id,\n      onClick: this.onItemClick.bind(this, company)\n    }, company, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.renderFilters(), this.renderList());\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => ({\n  companies: state.companies,\n  filters: state.filters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleFilter: location => dispatch(actions.toggleFilter(location))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyList);","map":{"version":3,"sources":["/home/dnordstrom/Code/javascript-interview-exercises/src/components/CompanyList.js"],"names":["React","connect","CompanyListItem","Filter","actions","Notifier","CompanyList","Component","constructor","getFilteredCompanies","props","filters","companies","filteredCompanies","length","filter","company","includes","location","onFilterClick","event","preventDefault","toggleFilter","target","innerText","onItemClick","notify","name","renderFilters","locations","Set","map","bind","renderList","id","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport CompanyListItem from './CompanyListItem';\nimport Filter from './Filter';\nimport actions from '../actions';\nimport Notifier from '../util/Notifier';\n\nclass CompanyList extends React.Component {\n  constructor() {\n    super();\n  }\n  \n  // Returns companies that should be visible according to active filter\n  getFilteredCompanies() {\n    const { filters, companies } = this.props;\n    let filteredCompanies;\n\n    if (filters.length) {\n      filteredCompanies = companies.filter(\n        company => filters.includes(company.location)\n      )\n    } else {\n      filteredCompanies = companies;\n    }\n\n    return filteredCompanies;\n  }\n\n  // Filter click handler\n  onFilterClick(event) {\n    event.preventDefault();\n\n    this.props.toggleFilter(event.target.innerText);\n  }\n\n  // Company item click handler\n  onItemClick(company) {\n    Notifier.notify(`${company.name} is located in ${company.location}`);\n  }\n\n  renderFilters() {\n    const { companies, filters } = this.props;\n    const locations = [...new Set(companies.map(company => company.location))];\n\n    return locations.map(location => (\n      <Filter\n        active={filters.includes(location)}\n        key={location}\n        location={location}\n        onClick={this.onFilterClick.bind(this)}>\n      </Filter>\n    ));\n  }\n\n  renderList() {\n    return (\n      <ul>\n          {this.getFilteredCompanies().map(company => (\n            <CompanyListItem\n              key={company.id}\n              onClick={this.onItemClick.bind(this, company)}\n              {...company}>\n            </CompanyListItem>\n          ))}\n        </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderFilters()}\n        {this.renderList()}\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => ({\n  companies: state.companies,\n  filters: state.filters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleFilter: location => dispatch(actions.toggleFilter(location))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CompanyList);"]},"metadata":{},"sourceType":"module"}