{"ast":null,"code":"import _defineProperty from \"/home/dnordstrom/Code/javascript-interview-exercises/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/dnordstrom/Code/javascript-interview-exercises/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dnordstrom/Code/javascript-interview-exercises/src/components/CompanyList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport CompanyListItem from './CompanyListItem';\nimport FilterButton from './FilterButton';\nimport Notifier from '../util/Notifier';\nexport default function CompanyList(props) {\n  const companies = props.companies;\n\n  const _useState = useState({\n    filters: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const locations = [...new Set(companies.map(company => company.location))]; // Returns companies that should be visible according to active filter\n\n  const getFilteredCompanies = () => {\n    let filteredCompanies;\n\n    if (state.filters.length) {\n      filteredCompanies = companies.filter(company => state.filters.includes(company.location));\n    } else {\n      filteredCompanies = companies;\n    }\n\n    return filteredCompanies;\n  }; // Filter click handler\n\n\n  const onFilterClick = ({\n    target\n  }) => {\n    const newState = _objectSpread({}, state); // Create new state from old\n\n\n    const index = state.filters.indexOf(target.innerText); // Modify filter state accordingly\n\n    if (index !== -1) {\n      newState.filters.splice(index, 1);\n    } else {\n      newState.filters.push(target.innerText);\n    }\n\n    setState(newState);\n  }; // Company item click handler\n\n\n  const onItemClick = company => {\n    Notifier.notify(\"\".concat(company.name, \" is located in \").concat(company.location));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, locations.map(location => React.createElement(FilterButton, {\n    key: location,\n    active: state.filters.includes(location),\n    location: location,\n    onClick: onFilterClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, getFilteredCompanies().map(company => React.createElement(CompanyListItem, Object.assign({\n    key: company.id,\n    onClick: onItemClick.bind(null, company)\n  }, company, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["/home/dnordstrom/Code/javascript-interview-exercises/src/components/CompanyList.js"],"names":["React","useState","CompanyListItem","FilterButton","Notifier","CompanyList","props","companies","filters","state","setState","locations","Set","map","company","location","getFilteredCompanies","filteredCompanies","length","filter","includes","onFilterClick","target","newState","index","indexOf","innerText","splice","push","onItemClick","notify","name","id","bind"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,QACjCC,SADiC,GACnBD,KADmB,CACjCC,SADiC;;AAAA,oBAEfN,QAAQ,CAAC;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFO;AAAA;AAAA,QAElCC,KAFkC;AAAA,QAE3BC,QAF2B;;AAGzC,QAAMC,SAAS,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQL,SAAS,CAACM,GAAV,CAAcC,OAAO,IAAIA,OAAO,CAACC,QAAjC,CAAR,CAAJ,CAAlB,CAHyC,CAKzC;;AACA,QAAMC,oBAAoB,GAAG,MAAM;AACjC,QAAIC,iBAAJ;;AAEA,QAAIR,KAAK,CAACD,OAAN,CAAcU,MAAlB,EAA0B;AACxBD,MAAAA,iBAAiB,GAAGV,SAAS,CAACY,MAAV,CAClBL,OAAO,IAAIL,KAAK,CAACD,OAAN,CAAcY,QAAd,CAAuBN,OAAO,CAACC,QAA/B,CADO,CAApB;AAGD,KAJD,MAIO;AACLE,MAAAA,iBAAiB,GAAGV,SAApB;AACD;;AAED,WAAOU,iBAAP;AACD,GAZD,CANyC,CAoBzC;;;AACA,QAAMI,aAAa,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACpC,UAAMC,QAAQ,qBAAQd,KAAR,CAAd,CADoC,CACL;;;AAC/B,UAAMe,KAAK,GAAGf,KAAK,CAACD,OAAN,CAAciB,OAAd,CAAsBH,MAAM,CAACI,SAA7B,CAAd,CAFoC,CAIpC;;AACA,QAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,MAAAA,QAAQ,CAACf,OAAT,CAAiBmB,MAAjB,CAAwBH,KAAxB,EAA+B,CAA/B;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,CAACf,OAAT,CAAiBoB,IAAjB,CAAsBN,MAAM,CAACI,SAA7B;AACD;;AAEDhB,IAAAA,QAAQ,CAACa,QAAD,CAAR;AACD,GAZD,CArByC,CAmCzC;;;AACA,QAAMM,WAAW,GAAIf,OAAD,IAAa;AAC/BV,IAAAA,QAAQ,CAAC0B,MAAT,WAAmBhB,OAAO,CAACiB,IAA3B,4BAAiDjB,OAAO,CAACC,QAAzD;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,SAAS,CAACE,GAAV,CAAcE,QAAQ,IACrB,oBAAC,YAAD;AACE,IAAA,GAAG,EAAEA,QADP;AAEE,IAAA,MAAM,EAAEN,KAAK,CAACD,OAAN,CAAcY,QAAd,CAAuBL,QAAvB,CAFV;AAGE,IAAA,QAAQ,EAAEA,QAHZ;AAIE,IAAA,OAAO,EAAEM,aAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,oBAAoB,GAAGH,GAAvB,CAA2BC,OAAO,IACjC,oBAAC,eAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACkB,EADf;AAEE,IAAA,OAAO,EAAEH,WAAW,CAACI,IAAZ,CAAiB,IAAjB,EAAuBnB,OAAvB;AAFX,KAGMA,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADH,CAVF,CADF;AAsBD","sourcesContent":["import React, { useState } from 'react';\nimport CompanyListItem from './CompanyListItem';\nimport FilterButton from './FilterButton';\nimport Notifier from '../util/Notifier';\n\nexport default function CompanyList(props) {\n  const { companies } = props;\n  const [state, setState] = useState({ filters: [] });\n  const locations = [...new Set(companies.map(company => company.location))];\n  \n  // Returns companies that should be visible according to active filter\n  const getFilteredCompanies = () => {\n    let filteredCompanies;\n\n    if (state.filters.length) {\n      filteredCompanies = companies.filter(\n        company => state.filters.includes(company.location)\n      )\n    } else {\n      filteredCompanies = companies;\n    }\n\n    return filteredCompanies;\n  }\n\n  // Filter click handler\n  const onFilterClick = ({ target }) => {\n    const newState = { ...state }; // Create new state from old\n    const index = state.filters.indexOf(target.innerText);\n\n    // Modify filter state accordingly\n    if (index !== -1) {\n      newState.filters.splice(index, 1);\n    } else {\n      newState.filters.push(target.innerText);\n    }\n\n    setState(newState);\n  }\n\n  // Company item click handler\n  const onItemClick = (company) => {\n    Notifier.notify(`${company.name} is located in ${company.location}`);\n  };\n\n  return (\n    <div>\n      {locations.map(location => (\n        <FilterButton\n          key={location}\n          active={state.filters.includes(location)}\n          location={location}\n          onClick={onFilterClick}>\n        </FilterButton>\n      ))}\n\n      <ul>\n        {getFilteredCompanies().map(company => (\n          <CompanyListItem\n            key={company.id}\n            onClick={onItemClick.bind(null, company)}\n            {...company}>\n          </CompanyListItem>\n        ))}\n      </ul>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}