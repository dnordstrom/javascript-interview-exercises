{"ast":null,"code":"import _defineProperty from \"/home/dnordstrom/Code/javascript-interview-exercises/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport companies from '../api';\nimport Actions from '../actions';\nconst initialState = {\n  companies,\n  filters: [],\n  filteredCompanies: companies\n};\n\nconst toggleFilter = (state, action) => {\n  const filters = [...state.filters];\n  const index = filters.indexOf(action.data);\n  let filteredCompanies; // Add or remove the filter from state\n\n  if (index !== -1) {\n    filters.splice(index, 1);\n  } else {\n    filters.push(action.data);\n  } // Update filtered company list\n\n\n  if (filters.length) {\n    filteredCompanies = companies.filter(company => filters.includes(company.location));\n  } else {\n    filteredCompanies = companies;\n  } // Return new state\n\n\n  return _objectSpread({}, state, {\n    filters,\n    filteredCompanies\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.Types.TOGGLE_FILTER:\n      {\n        return toggleFilter(state, action);\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/dnordstrom/Code/javascript-interview-exercises/src/reducers/index.js"],"names":["companies","Actions","initialState","filters","filteredCompanies","toggleFilter","state","action","index","indexOf","data","splice","push","length","filter","company","includes","location","reducer","type","Types","TOGGLE_FILTER"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,QAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,MAAMC,YAAY,GAAG;AACnBF,EAAAA,SADmB;AAEnBG,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,iBAAiB,EAAEJ;AAHA,CAArB;;AAMA,MAAMK,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,QAAMJ,OAAO,GAAG,CAAC,GAAGG,KAAK,CAACH,OAAV,CAAhB;AACA,QAAMK,KAAK,GAAGL,OAAO,CAACM,OAAR,CAAgBF,MAAM,CAACG,IAAvB,CAAd;AACA,MAAIN,iBAAJ,CAHsC,CAKtC;;AACA,MAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBL,IAAAA,OAAO,CAACQ,MAAR,CAAeH,KAAf,EAAsB,CAAtB;AACD,GAFD,MAEO;AACLL,IAAAA,OAAO,CAACS,IAAR,CAAaL,MAAM,CAACG,IAApB;AACD,GAVqC,CAYtC;;;AACA,MAAIP,OAAO,CAACU,MAAZ,EAAoB;AAClBT,IAAAA,iBAAiB,GAAGJ,SAAS,CAACc,MAAV,CAClBC,OAAO,IAAIZ,OAAO,CAACa,QAAR,CAAiBD,OAAO,CAACE,QAAzB,CADO,CAApB;AAGD,GAJD,MAIO;AACLb,IAAAA,iBAAiB,GAAGJ,SAApB;AACD,GAnBqC,CAqBtC;;;AACA,2BAAYM,KAAZ;AAAmBH,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B;AACD,CAvBD;;AAyBA,MAAMc,OAAO,GAAG,CAACZ,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACY,IAAf;AAEE,SAAKlB,OAAO,CAACmB,KAAR,CAAcC,aAAnB;AAAkC;AAChC,eAAOhB,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAnB;AACD;;AAED;AAAS;AACP,eAAOD,KAAP;AACD;AARH;AAWD,CAZD;;AAcA,eAAeY,OAAf","sourcesContent":["import companies from '../api';\nimport Actions from '../actions';\n\nconst initialState = {\n  companies,\n  filters: [],\n  filteredCompanies: companies\n}\n\nconst toggleFilter = (state, action) => {\n  const filters = [...state.filters];\n  const index = filters.indexOf(action.data);\n  let filteredCompanies;\n  \n  // Add or remove the filter from state\n  if (index !== -1) {\n    filters.splice(index, 1);\n  } else {\n    filters.push(action.data);\n  }\n\n  // Update filtered company list\n  if (filters.length) {\n    filteredCompanies = companies.filter(\n      company => filters.includes(company.location)\n    );\n  } else {\n    filteredCompanies = companies;\n  }\n\n  // Return new state\n  return { ...state, filters, filteredCompanies };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case Actions.Types.TOGGLE_FILTER: {\n      return toggleFilter(state, action);\n    }\n    \n    default: {\n      return state;\n    }\n\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}